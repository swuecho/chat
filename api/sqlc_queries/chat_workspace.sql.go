// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: chat_workspace.sql

package sqlc_queries

import (
	"context"
	"time"
)

const createDefaultWorkspace = `-- name: CreateDefaultWorkspace :one
INSERT INTO chat_workspace (uuid, user_id, name, description, color, icon, is_default, order_position)
VALUES ($1, $2, 'General', 'Default workspace for all conversations', '#6366f1', 'folder', true, 0)
RETURNING id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position
`

type CreateDefaultWorkspaceParams struct {
	Uuid   string `json:"uuid"`
	UserID int32  `json:"userId"`
}

func (q *Queries) CreateDefaultWorkspace(ctx context.Context, arg CreateDefaultWorkspaceParams) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, createDefaultWorkspace, arg.Uuid, arg.UserID)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO chat_workspace (uuid, user_id, name, description, color, icon, is_default, order_position)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position
`

type CreateWorkspaceParams struct {
	Uuid          string `json:"uuid"`
	UserID        int32  `json:"userId"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	Color         string `json:"color"`
	Icon          string `json:"icon"`
	IsDefault     bool   `json:"isDefault"`
	OrderPosition int32  `json:"orderPosition"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, createWorkspace,
		arg.Uuid,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.Icon,
		arg.IsDefault,
		arg.OrderPosition,
	)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM chat_workspace 
WHERE uuid = $1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspace, uuid)
	return err
}

const getDefaultWorkspaceByUserID = `-- name: GetDefaultWorkspaceByUserID :one
SELECT id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position FROM chat_workspace 
WHERE user_id = $1 AND is_default = true
LIMIT 1
`

func (q *Queries) GetDefaultWorkspaceByUserID(ctx context.Context, userID int32) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, getDefaultWorkspaceByUserID, userID)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const getWorkspaceByUUID = `-- name: GetWorkspaceByUUID :one
SELECT id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position FROM chat_workspace 
WHERE uuid = $1
`

func (q *Queries) GetWorkspaceByUUID(ctx context.Context, uuid string) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByUUID, uuid)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const getWorkspaceWithSessionCount = `-- name: GetWorkspaceWithSessionCount :many
SELECT 
    w.id, w.uuid, w.user_id, w.name, w.description, w.color, w.icon, w.created_at, w.updated_at, w.is_default, w.order_position,
    COUNT(cs.id) as session_count
FROM chat_workspace w
LEFT JOIN chat_session cs ON w.id = cs.workspace_id AND cs.active = true
WHERE w.user_id = $1
GROUP BY w.id
ORDER BY w.order_position ASC, w.created_at ASC
`

type GetWorkspaceWithSessionCountRow struct {
	ID            int32     `json:"id"`
	Uuid          string    `json:"uuid"`
	UserID        int32     `json:"userId"`
	Name          string    `json:"name"`
	Description   string    `json:"description"`
	Color         string    `json:"color"`
	Icon          string    `json:"icon"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	IsDefault     bool      `json:"isDefault"`
	OrderPosition int32     `json:"orderPosition"`
	SessionCount  int64     `json:"sessionCount"`
}

func (q *Queries) GetWorkspaceWithSessionCount(ctx context.Context, userID int32) ([]GetWorkspaceWithSessionCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceWithSessionCount, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspaceWithSessionCountRow
	for rows.Next() {
		var i GetWorkspaceWithSessionCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDefault,
			&i.OrderPosition,
			&i.SessionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacesByUserID = `-- name: GetWorkspacesByUserID :many
SELECT id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position FROM chat_workspace 
WHERE user_id = $1
ORDER BY order_position ASC, created_at ASC
`

func (q *Queries) GetWorkspacesByUserID(ctx context.Context, userID int32) ([]ChatWorkspace, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatWorkspace
	for rows.Next() {
		var i ChatWorkspace
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDefault,
			&i.OrderPosition,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasWorkspacePermission = `-- name: HasWorkspacePermission :one
SELECT COUNT(*) > 0 as has_permission
FROM chat_workspace w
INNER JOIN auth_user au ON w.user_id = au.id
WHERE w.uuid = $1 AND (w.user_id = $2 OR au.is_superuser)
`

type HasWorkspacePermissionParams struct {
	Uuid   string `json:"uuid"`
	UserID int32  `json:"userId"`
}

func (q *Queries) HasWorkspacePermission(ctx context.Context, arg HasWorkspacePermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasWorkspacePermission, arg.Uuid, arg.UserID)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const setDefaultWorkspace = `-- name: SetDefaultWorkspace :one
UPDATE chat_workspace 
SET is_default = $2, updated_at = now()
WHERE uuid = $1
RETURNING id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position
`

type SetDefaultWorkspaceParams struct {
	Uuid      string `json:"uuid"`
	IsDefault bool   `json:"isDefault"`
}

func (q *Queries) SetDefaultWorkspace(ctx context.Context, arg SetDefaultWorkspaceParams) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, setDefaultWorkspace, arg.Uuid, arg.IsDefault)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE chat_workspace 
SET name = $2, description = $3, color = $4, icon = $5, updated_at = now()
WHERE uuid = $1
RETURNING id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position
`

type UpdateWorkspaceParams struct {
	Uuid        string `json:"uuid"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Color       string `json:"color"`
	Icon        string `json:"icon"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, updateWorkspace,
		arg.Uuid,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.Icon,
	)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}

const updateWorkspaceOrder = `-- name: UpdateWorkspaceOrder :one
UPDATE chat_workspace 
SET order_position = $2, updated_at = now()
WHERE uuid = $1
RETURNING id, uuid, user_id, name, description, color, icon, created_at, updated_at, is_default, order_position
`

type UpdateWorkspaceOrderParams struct {
	Uuid          string `json:"uuid"`
	OrderPosition int32  `json:"orderPosition"`
}

func (q *Queries) UpdateWorkspaceOrder(ctx context.Context, arg UpdateWorkspaceOrderParams) (ChatWorkspace, error) {
	row := q.db.QueryRowContext(ctx, updateWorkspaceOrder, arg.Uuid, arg.OrderPosition)
	var i ChatWorkspace
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDefault,
		&i.OrderPosition,
	)
	return i, err
}
