// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: chat_log.sql

package sqlc_queries

import (
	"context"
)

const chatLogByID = `-- name: ChatLogByID :one
SELECT id, session, question, answer, created_at FROM chat_logs WHERE id = $1
`

func (q *Queries) ChatLogByID(ctx context.Context, id int32) (ChatLog, error) {
	row := q.db.QueryRow(ctx, chatLogByID, id)
	var i ChatLog
	err := row.Scan(
		&i.ID,
		&i.Session,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
	)
	return i, err
}

const createChatLog = `-- name: CreateChatLog :one
INSERT INTO chat_logs (session, question, answer)
VALUES ($1, $2, $3)
RETURNING id, session, question, answer, created_at
`

type CreateChatLogParams struct {
	Session  []byte `json:"session"`
	Question []byte `json:"question"`
	Answer   []byte `json:"answer"`
}

func (q *Queries) CreateChatLog(ctx context.Context, arg CreateChatLogParams) (ChatLog, error) {
	row := q.db.QueryRow(ctx, createChatLog, arg.Session, arg.Question, arg.Answer)
	var i ChatLog
	err := row.Scan(
		&i.ID,
		&i.Session,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChatLog = `-- name: DeleteChatLog :exec
DELETE FROM chat_logs WHERE id = $1
`

func (q *Queries) DeleteChatLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteChatLog, id)
	return err
}

const listChatLogs = `-- name: ListChatLogs :many
SELECT id, session, question, answer, created_at FROM chat_logs ORDER BY id
`

func (q *Queries) ListChatLogs(ctx context.Context) ([]ChatLog, error) {
	rows, err := q.db.Query(ctx, listChatLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatLog
	for rows.Next() {
		var i ChatLog
		if err := rows.Scan(
			&i.ID,
			&i.Session,
			&i.Question,
			&i.Answer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatLog = `-- name: UpdateChatLog :one
UPDATE chat_logs SET session = $2, question = $3, answer = $4
WHERE id = $1
RETURNING id, session, question, answer, created_at
`

type UpdateChatLogParams struct {
	ID       int32  `json:"id"`
	Session  []byte `json:"session"`
	Question []byte `json:"question"`
	Answer   []byte `json:"answer"`
}

func (q *Queries) UpdateChatLog(ctx context.Context, arg UpdateChatLogParams) (ChatLog, error) {
	row := q.db.QueryRow(ctx, updateChatLog,
		arg.ID,
		arg.Session,
		arg.Question,
		arg.Answer,
	)
	var i ChatLog
	err := row.Scan(
		&i.ID,
		&i.Session,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
	)
	return i, err
}
