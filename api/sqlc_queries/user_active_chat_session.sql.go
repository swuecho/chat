// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_active_chat_session.sql

package sqlc_queries

import (
	"context"
	"database/sql"
)

const deleteUserActiveSession = `-- name: DeleteUserActiveSession :exec
DELETE FROM user_active_chat_session
WHERE user_id = $1 AND (
    (workspace_id IS NULL AND $2::int IS NULL) OR 
    (workspace_id = $2)
)
`

type DeleteUserActiveSessionParams struct {
	UserID  int32 `json:"userId"`
	Column2 int32 `json:"column2"`
}

func (q *Queries) DeleteUserActiveSession(ctx context.Context, arg DeleteUserActiveSessionParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserActiveSession, arg.UserID, arg.Column2)
	return err
}

const deleteUserActiveSessionBySession = `-- name: DeleteUserActiveSessionBySession :exec
DELETE FROM user_active_chat_session
WHERE user_id = $1 AND chat_session_uuid = $2
`

type DeleteUserActiveSessionBySessionParams struct {
	UserID          int32  `json:"userId"`
	ChatSessionUuid string `json:"chatSessionUuid"`
}

func (q *Queries) DeleteUserActiveSessionBySession(ctx context.Context, arg DeleteUserActiveSessionBySessionParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserActiveSessionBySession, arg.UserID, arg.ChatSessionUuid)
	return err
}

const getAllUserActiveSessions = `-- name: GetAllUserActiveSessions :many
SELECT id, user_id, chat_session_uuid, created_at, updated_at, workspace_id FROM user_active_chat_session
WHERE user_id = $1
ORDER BY workspace_id NULLS FIRST, updated_at DESC
`

func (q *Queries) GetAllUserActiveSessions(ctx context.Context, userID int32) ([]UserActiveChatSession, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserActiveSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserActiveChatSession
	for rows.Next() {
		var i UserActiveChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatSessionUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActiveSession = `-- name: GetUserActiveSession :one
SELECT id, user_id, chat_session_uuid, created_at, updated_at, workspace_id FROM user_active_chat_session 
WHERE user_id = $1 AND (
    (workspace_id IS NULL AND $2::int IS NULL) OR 
    (workspace_id = $2)
)
`

type GetUserActiveSessionParams struct {
	UserID  int32 `json:"userId"`
	Column2 int32 `json:"column2"`
}

func (q *Queries) GetUserActiveSession(ctx context.Context, arg GetUserActiveSessionParams) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, getUserActiveSession, arg.UserID, arg.Column2)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WorkspaceID,
	)
	return i, err
}

const upsertUserActiveSession = `-- name: UpsertUserActiveSession :one

INSERT INTO user_active_chat_session (user_id, workspace_id, chat_session_uuid)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, COALESCE(workspace_id, -1))
DO UPDATE SET 
    chat_session_uuid = EXCLUDED.chat_session_uuid,
    updated_at = now()
RETURNING id, user_id, chat_session_uuid, created_at, updated_at, workspace_id
`

type UpsertUserActiveSessionParams struct {
	UserID          int32         `json:"userId"`
	WorkspaceID     sql.NullInt32 `json:"workspaceId"`
	ChatSessionUuid string        `json:"chatSessionUuid"`
}

// Simplified unified queries for active sessions
func (q *Queries) UpsertUserActiveSession(ctx context.Context, arg UpsertUserActiveSessionParams) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, upsertUserActiveSession, arg.UserID, arg.WorkspaceID, arg.ChatSessionUuid)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WorkspaceID,
	)
	return i, err
}
