// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_active_chat_session.sql

package sqlc_queries

import (
	"context"
)

const createOrUpdateUserActiveChatSession = `-- name: CreateOrUpdateUserActiveChatSession :one
INSERT INTO user_active_chat_session(user_id, chat_session_uuid)
VALUES ($1, $2)
ON CONFLICT (user_id) 
DO UPDATE SET
chat_session_uuid = EXCLUDED.chat_session_uuid,
updated_at = now()
returning id, user_id, chat_session_uuid, created_at, updated_at
`

type CreateOrUpdateUserActiveChatSessionParams struct {
	UserID          int32  `json:"userID"`
	ChatSessionUuid string `json:"chatSessionUuid"`
}

func (q *Queries) CreateOrUpdateUserActiveChatSession(ctx context.Context, arg CreateOrUpdateUserActiveChatSessionParams) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUserActiveChatSession, arg.UserID, arg.ChatSessionUuid)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserActiveChatSession = `-- name: CreateUserActiveChatSession :one
INSERT INTO user_active_chat_session (user_id, chat_session_uuid)
VALUES ($1, $2)
RETURNING id, user_id, chat_session_uuid, created_at, updated_at
`

type CreateUserActiveChatSessionParams struct {
	UserID          int32  `json:"userID"`
	ChatSessionUuid string `json:"chatSessionUuid"`
}

func (q *Queries) CreateUserActiveChatSession(ctx context.Context, arg CreateUserActiveChatSessionParams) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, createUserActiveChatSession, arg.UserID, arg.ChatSessionUuid)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserActiveChatSession = `-- name: DeleteUserActiveChatSession :exec
DELETE FROM user_active_chat_session WHERE user_id = $1
`

func (q *Queries) DeleteUserActiveChatSession(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserActiveChatSession, userID)
	return err
}

const getUserActiveChatSession = `-- name: GetUserActiveChatSession :one
SELECT id, user_id, chat_session_uuid, created_at, updated_at FROM user_active_chat_session WHERE user_id = $1
`

func (q *Queries) GetUserActiveChatSession(ctx context.Context, userID int32) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, getUserActiveChatSession, userID)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserActiveChatSessions = `-- name: ListUserActiveChatSessions :many
SELECT id, user_id, chat_session_uuid, created_at, updated_at FROM user_active_chat_session ORDER BY id
`

func (q *Queries) ListUserActiveChatSessions(ctx context.Context) ([]UserActiveChatSession, error) {
	rows, err := q.db.QueryContext(ctx, listUserActiveChatSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserActiveChatSession
	for rows.Next() {
		var i UserActiveChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatSessionUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserActiveChatSession = `-- name: UpdateUserActiveChatSession :one
UPDATE user_active_chat_session SET chat_session_uuid = $1, updated_at = now()
WHERE user_id = $2
RETURNING id, user_id, chat_session_uuid, created_at, updated_at
`

type UpdateUserActiveChatSessionParams struct {
	ChatSessionUuid string `json:"chatSessionUuid"`
	UserID          int32  `json:"userID"`
}

func (q *Queries) UpdateUserActiveChatSession(ctx context.Context, arg UpdateUserActiveChatSessionParams) (UserActiveChatSession, error) {
	row := q.db.QueryRowContext(ctx, updateUserActiveChatSession, arg.ChatSessionUuid, arg.UserID)
	var i UserActiveChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatSessionUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
